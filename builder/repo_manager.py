import os, time, requests
from github import Github
from dotenv import load_dotenv

load_dotenv()
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")

if not GITHUB_TOKEN:
    raise Exception("❌ Missing GITHUB_TOKEN in .env")

g = Github(GITHUB_TOKEN)
user = g.get_user()

def create_or_update_github_repo(repo_name: str, html_code: str):
    """
    Creates or updates a GitHub repository, pushes HTML code,
    and enables GitHub Pages.
    """
    print(f"\n🪄 Preparing repository '{repo_name}'...")

    try:
        repo = user.get_repo(repo_name)
        print(f"🔁 Repo '{repo_name}' already exists — updating files...")
    except Exception:
        repo = user.create_repo(repo_name, private=False)
        print(f"🆕 Created new repo: {repo.html_url}")

    # index.html
    try:
        existing = repo.get_contents("index.html")
        repo.update_file("index.html", "Update index.html", html_code, existing.sha)
        print("📄 Updated index.html")
    except Exception:
        repo.create_file("index.html", "Add index.html", html_code)
        print("📄 Added index.html")

    # README
    readme = f"# {repo_name}\n\nAuto-generated by the Autobuilder.\n"
    try:
        existing = repo.get_contents("README.md")
        repo.update_file("README.md", "Update README.md", readme, existing.sha)
    except Exception:
        repo.create_file("README.md", "Add README.md", readme)
    print("📝 README.md added/updated")

    # LICENSE (MIT)
    license_text = f"""MIT License

Copyright (c) 2025 {user.login}

Permission is hereby granted, free of charge, to any person obtaining a copy...
"""
    try:
        existing = repo.get_contents("LICENSE")
        repo.update_file("LICENSE", "Update LICENSE", license_text, existing.sha)
    except Exception:
        repo.create_file("LICENSE", "Add MIT License", license_text)
    print("📜 LICENSE added/updated")

    pages_url = f"https://{user.login}.github.io/{repo_name}/"

    # Wait for GitHub Pages
    print(f"⏳ Waiting for deployment: {pages_url}")
    for _ in range(12):
        try:
            r = requests.get(pages_url, timeout=5)
            if r.status_code == 200:
                print("✅ GitHub Pages is live!")
                break
        except Exception:
            pass
        time.sleep(5)

    print(f"🏁 Final URL: {pages_url}")
    return repo.html_url, pages_url
